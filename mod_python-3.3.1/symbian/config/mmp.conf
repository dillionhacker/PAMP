#ifndef mod_python_symbian_config_mmp_conf
#define mod_python_symbian_config_mmp_conf
/* Copyright 2008 Nokia Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "symbian_mod_python_config.h"

//
// NOTE: This is included in mmp-files. Don't put anything that cannot
//       be understood by mmp processor here.
//


// In e32def.h there's a const delcaration whose initialization according
// to gcce is not const and consequently therefore not legal c-code.
// Fortunately that code can be hidded with this define.
//
MACRO __REMOVE_PLATSEC_DIAGNOSTIC_STRINGS__

// pyconfig.h defined HUGE_VAL and it conflicts with the definition
// in OpenC's math.h.
//
MACRO HAVE_HUGE_VAL

//
// Suppress annoying warning messages.
//
// Since this is 3rd-party code that is used pretty much verbatim,
// it's not worth while to modify the code itself to remove the
// warnings.
// 

//
// ARMCC
//
//   68 : integer conversion resulted in a change of sign
//  111 : statement is unreachable
//  188 : enumerated type mixed with another type
// 1293 : assignment in condition
// 1296 : extended constant initializer used
//
OPTION    ARMCC --diag_suppress 68,111,188,1293,1296

//
// CW
//
//        variable/argument '...' is not used in function
//
OPTION    CW -w nounusedarg


//
// On EKA2 there are two kinds of toolchains - one building according to
// abiv1 and another one building according to abiv2. These abi's are
// linktime incompatible, but the generated binaries are runtime
// compatible.
//
// Built DLLs and their import libraries have different names and can
// thus be built using the same SDK, but static libraries, although
// also incompatible, have the same name and thus effectively prevent
// you from building static libraries with gcce (abiv2) and armv5 (abiv1) 
// using the same SDK.
//
// The use of these macros ensure that the names are different.
//

//
// NOTE: The check should be based on whether gcce _or_ armv5_abiv2
//       is used, but there is no(?) way for detecting whether
//       armv5 or armv5_abiv2 is used.
// 

#if defined(WINS)
#define STATICLIBRARY_NAME(name) name
#elif defined(GCCE)
#define STATICLIBRARY_NAME(name) abiv2_ ## name
#else
// Assumed armv5.
#define STATICLIBRARY_NAME(name) abiv1_ ## name
#endif

#endif
